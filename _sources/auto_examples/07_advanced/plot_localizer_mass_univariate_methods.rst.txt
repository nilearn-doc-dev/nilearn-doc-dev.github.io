
.. DO NOT EDIT.
.. THIS FILE WAS AUTOMATICALLY GENERATED BY SPHINX-GALLERY.
.. TO MAKE CHANGES, EDIT THE SOURCE PYTHON FILE:
.. "auto_examples/07_advanced/plot_localizer_mass_univariate_methods.py"
.. LINE NUMBERS ARE GIVEN BELOW.

.. only:: html

    .. note::
        :class: sphx-glr-download-link-note

        Click :ref:`here <sphx_glr_download_auto_examples_07_advanced_plot_localizer_mass_univariate_methods.py>`
        to download the full example code or to run this example in your browser via Binder

.. rst-class:: sphx-glr-example-title

.. _sphx_glr_auto_examples_07_advanced_plot_localizer_mass_univariate_methods.py:


Massively univariate analysis of a motor task from the Localizer dataset
========================================================================

This example shows the results obtained in a massively univariate
analysis performed at the inter-subject level with various methods.
We use the [left button press (auditory cue)] task from the Localizer
dataset and seek association between the contrast values and a variate
that measures the speed of pseudo-word reading. No confounding variate
is included in the model.

1. A standard :term:`ANOVA` is performed. Data smoothed at 5
   :term:`voxels<voxel>` :term:`FWHM` are used.

2. A permuted Ordinary Least Squares algorithm is run at each :term:`voxel`.
   Data smoothed at 5 :term:`voxels<voxel>` :term:`FWHM` are used.

.. GENERATED FROM PYTHON SOURCE LINES 20-28

.. code-block:: default

    # Author: Virgile Fritsch, <virgile.fritsch@inria.fr>, May. 2014
    import numpy as np
    import matplotlib.pyplot as plt
    from nilearn import datasets
    from nilearn.maskers import NiftiMasker
    from nilearn.mass_univariate import permuted_ols
    from nilearn.image import get_data


.. GENERATED FROM PYTHON SOURCE LINES 29-30

Load Localizer contrast

.. GENERATED FROM PYTHON SOURCE LINES 30-52

.. code-block:: default

    n_samples = 94
    localizer_dataset = datasets.fetch_localizer_contrasts(
        ['left button press (auditory cue)'],
        n_subjects=n_samples, legacy_format=False
    )

    # print basic information on the dataset
    print('First contrast nifti image (3D) is located at: %s' %
          localizer_dataset.cmaps[0])

    tested_var = localizer_dataset.ext_vars['pseudo']
    # Quality check / Remove subjects with bad tested variate
    mask_quality_check = np.where(
        np.logical_not(np.isnan(tested_var))
    )[0]
    n_samples = mask_quality_check.size
    contrast_map_filenames = [localizer_dataset.cmaps[i]
                              for i in mask_quality_check]
    tested_var = tested_var[mask_quality_check].values.reshape((-1, 1))
    print("Actual number of subjects after quality check: %d" % n_samples)



.. GENERATED FROM PYTHON SOURCE LINES 53-54

Mask data

.. GENERATED FROM PYTHON SOURCE LINES 54-60

.. code-block:: default

    nifti_masker = NiftiMasker(
        smoothing_fwhm=5,
        memory='nilearn_cache', memory_level=1)  # cache options
    fmri_masked = nifti_masker.fit_transform(contrast_map_filenames)



.. GENERATED FROM PYTHON SOURCE LINES 61-62

Anova (parametric F-scores)

.. GENERATED FROM PYTHON SOURCE LINES 62-72

.. code-block:: default

    from sklearn.feature_selection import f_regression
    _, pvals_anova = f_regression(fmri_masked, tested_var, center=True)
    pvals_anova *= fmri_masked.shape[1]
    pvals_anova[np.isnan(pvals_anova)] = 1
    pvals_anova[pvals_anova > 1] = 1
    neg_log_pvals_anova = - np.log10(pvals_anova)
    neg_log_pvals_anova_unmasked = nifti_masker.inverse_transform(
        neg_log_pvals_anova)



.. GENERATED FROM PYTHON SOURCE LINES 73-74

Perform massively univariate analysis with permuted OLS

.. GENERATED FROM PYTHON SOURCE LINES 74-84

.. code-block:: default

    neg_log_pvals_permuted_ols, _, _ = permuted_ols(
        tested_var, fmri_masked,
        model_intercept=True,
        n_perm=5000,  # 5,000 for the sake of time. Idealy, this should be 10,000
        verbose=1, # display progress bar
        n_jobs=1)  # can be changed to use more CPUs
    neg_log_pvals_permuted_ols_unmasked = nifti_masker.inverse_transform(
        np.ravel(neg_log_pvals_permuted_ols))



.. GENERATED FROM PYTHON SOURCE LINES 85-86

Visualization

.. GENERATED FROM PYTHON SOURCE LINES 86-127

.. code-block:: default

    from nilearn.plotting import plot_stat_map, show

    # Various plotting parameters
    z_slice = 12  # plotted slice

    threshold = - np.log10(0.1)  # 10% corrected
    vmax = min(np.amax(neg_log_pvals_permuted_ols),
               np.amax(neg_log_pvals_anova))

    # Plot Anova p-values
    fig = plt.figure(figsize=(5, 7), facecolor='k')

    display = plot_stat_map(neg_log_pvals_anova_unmasked,
                            threshold=threshold,
                            display_mode='z', cut_coords=[z_slice],
                            figure=fig, vmax=vmax, black_bg=True)

    n_detections = (get_data(neg_log_pvals_anova_unmasked) > threshold).sum()
    title = ('Negative $\\log_{10}$ p-values'
             '\n(Parametric + Bonferroni correction)'
             '\n%d detections') % n_detections

    display.title(title, y=1.2)

    # Plot permuted OLS p-values
    fig = plt.figure(figsize=(5, 7), facecolor='k')

    display = plot_stat_map(neg_log_pvals_permuted_ols_unmasked,
                            threshold=threshold,
                            display_mode='z', cut_coords=[z_slice],
                            figure=fig, vmax=vmax, black_bg=True)

    n_detections = (get_data(neg_log_pvals_permuted_ols_unmasked)
                    > threshold).sum()
    title = ('Negative $\\log_{10}$ p-values'
             '\n(Non-parametric + max-type correction)'
             '\n%d detections') % n_detections

    display.title(title, y=1.2)

    show()


.. rst-class:: sphx-glr-timing

   **Total running time of the script:** ( 0 minutes  0.000 seconds)

**Estimated memory usage:**  0 MB


.. _sphx_glr_download_auto_examples_07_advanced_plot_localizer_mass_univariate_methods.py:


.. only :: html

 .. container:: sphx-glr-footer
    :class: sphx-glr-footer-example


  .. container:: binder-badge

    .. image:: images/binder_badge_logo.svg
      :target: https://mybinder.org/v2/gh/nilearn/nilearn.github.io/main?filepath=examples/auto_examples/07_advanced/plot_localizer_mass_univariate_methods.ipynb
      :alt: Launch binder
      :width: 150 px


  .. container:: sphx-glr-download sphx-glr-download-python

     :download:`Download Python source code: plot_localizer_mass_univariate_methods.py <plot_localizer_mass_univariate_methods.py>`



  .. container:: sphx-glr-download sphx-glr-download-jupyter

     :download:`Download Jupyter notebook: plot_localizer_mass_univariate_methods.ipynb <plot_localizer_mass_univariate_methods.ipynb>`


.. only:: html

 .. rst-class:: sphx-glr-signature

    `Gallery generated by Sphinx-Gallery <https://sphinx-gallery.github.io>`_
